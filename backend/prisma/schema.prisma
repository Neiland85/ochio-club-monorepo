// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  fullName  String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile information
  bio         String?
  website     String?
  phoneNumber String?
  dateOfBirth DateTime?

  // Preferences
  preferences Json?

  // Relations
  location         UserLocation?
  checkins         EventCheckin[]
  achievements     UserAchievement[]
  chatMessages     ChatMessage[]
  PushSubscription PushSubscription[]

  @@map("users")
}

model UserLocation {
  id        String   @id @default(cuid())
  userId    String   @unique
  latitude  Float
  longitude Float
  address   String?
  city      String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_locations")
}

model Stadium {
  id          String   @id @default(cuid())
  name        String
  latitude    Float
  longitude   Float
  address     String?
  city        String
  country     String
  capacity    Int?
  imageUrl    String?
  website     String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  events Event[]

  @@map("stadiums")
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String?
  eventDate   DateTime
  endDate     DateTime?
  imageUrl    String?
  maxCapacity Int?
  status      EventStatus @default(UPCOMING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Foreign keys
  stadiumId String

  // Relations
  stadium  Stadium        @relation(fields: [stadiumId], references: [id])
  checkins EventCheckin[]

  @@map("events")
}

model EventCheckin {
  id          String   @id @default(cuid())
  userId      String
  eventId     String
  latitude    Float?
  longitude   Float?
  checkedInAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_checkins")
}

model Achievement {
  id           String              @id @default(cuid())
  name         String
  description  String
  icon         String?
  points       Int                 @default(0)
  category     AchievementCategory
  requirements Json? // Flexible requirements structure
  createdAt    DateTime            @default(now())

  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model ChatRoom {
  id        String       @id @default(cuid())
  name      String
  type      ChatRoomType
  stadiumId String?
  eventId   String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  messages ChatMessage[]

  @@map("chat_rooms")
}

model ChatMessage {
  id         String   @id @default(cuid())
  content    String
  userId     String
  chatRoomId String
  createdAt  DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Analytics {
  id        String        @id @default(cuid())
  type      AnalyticsType
  data      Json
  timestamp DateTime      @default(now())

  @@map("analytics")
}

model PushSubscription {
  id           String   @id @default(cuid())
  userId       String
  endpoint     String
  subscription Json
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, endpoint])
}

// Enums
enum EventStatus {
  UPCOMING
  LIVE
  COMPLETED
  CANCELLED
}

enum AchievementCategory {
  ATTENDANCE
  DISTANCE
  SOCIAL
  SPECIAL
}

enum ChatRoomType {
  STADIUM
  EVENT
  GENERAL
}

enum AnalyticsType {
  USER_LOCATION
  EVENT_ATTENDANCE
  APP_USAGE
  PERFORMANCE
}
